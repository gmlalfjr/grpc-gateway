// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: timeline/timeline.proto

package timeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimelineClient is the client API for Timeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimelineClient interface {
	CreateTimeline(ctx context.Context, in *TimelineRequest, opts ...grpc.CallOption) (*TimelineResponse, error)
}

type timelineClient struct {
	cc grpc.ClientConnInterface
}

func NewTimelineClient(cc grpc.ClientConnInterface) TimelineClient {
	return &timelineClient{cc}
}

func (c *timelineClient) CreateTimeline(ctx context.Context, in *TimelineRequest, opts ...grpc.CallOption) (*TimelineResponse, error) {
	out := new(TimelineResponse)
	err := c.cc.Invoke(ctx, "/main.Timeline/CreateTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimelineServer is the server API for Timeline service.
// All implementations must embed UnimplementedTimelineServer
// for forward compatibility
type TimelineServer interface {
	CreateTimeline(context.Context, *TimelineRequest) (*TimelineResponse, error)
	mustEmbedUnimplementedTimelineServer()
}

// UnimplementedTimelineServer must be embedded to have forward compatible implementations.
type UnimplementedTimelineServer struct {
}

func (UnimplementedTimelineServer) CreateTimeline(context.Context, *TimelineRequest) (*TimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeline not implemented")
}
func (UnimplementedTimelineServer) mustEmbedUnimplementedTimelineServer() {}

// UnsafeTimelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimelineServer will
// result in compilation errors.
type UnsafeTimelineServer interface {
	mustEmbedUnimplementedTimelineServer()
}

func RegisterTimelineServer(s grpc.ServiceRegistrar, srv TimelineServer) {
	s.RegisterService(&Timeline_ServiceDesc, srv)
}

func _Timeline_CreateTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).CreateTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Timeline/CreateTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).CreateTimeline(ctx, req.(*TimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeline_ServiceDesc is the grpc.ServiceDesc for Timeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Timeline",
	HandlerType: (*TimelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimeline",
			Handler:    _Timeline_CreateTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeline/timeline.proto",
}
